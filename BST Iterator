tc-next, hasNext-o(1) and pushAll- height of tree- o(h)
sc-o(h)
step1- init push all the left nodes of the BST
in next operation- pop the top most element which is your next element
now left done, node done, now push the right node in st
in hasNext, if st.empty then nothing left so false, else true
class BSTIterator {
private:
    stack<TreeNode*> st;
public:
    BSTIterator(TreeNode* root) {
        pushAll(root);
    }

    void pushAll(TreeNode* root){
        while(root){
            st.push(root);
            root = root->left;
        }
    }
    
    int next() {
        TreeNode* temp = st.top();
        int ans = temp->val;
        st.pop();
        if(temp->right){
            pushAll(temp->right);
        }
        return ans;
    }
    
    bool hasNext() {
        return !st.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
