/////RECURSIVE SOLUTION/////////////
tc-o(n), sc-o(logn)
class Solution {
public:
    TreeNode* fn(vector<int>& nums, int s, int e){
        if(s>e) return NULL;
        int mid = s+(e-s)/2;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = fn(nums, s, mid-1);
        root->right = fn(nums, mid+1, e);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return fn(nums, 0, nums.size()-1);
    }
};

//////////Iterative SOlution/////////////
tc-o(n), sc-o(n)
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
       int n = nums.size();
       if(n==0) return NULL;
       if(n==1) return new TreeNode(nums[0]);
       int mid = n/2;
       TreeNode* root = new TreeNode(nums[mid]);
       vector<int> leftArray(nums.begin(), nums.begin() + mid);
       vector<int> rightArray(nums.begin()+mid+1, nums.end());
       root->left = sortedArrayToBST(leftArray);
       root->right = sortedArrayToBST(rightArray);
       return root;
    }
};
