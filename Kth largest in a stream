Constructor
Time Complexity:
Inserting each element into the heap takes O(log k) time because the heap can have at most k elements.
For n elements in nums, the overall time complexity is O(n log k).
Space Complexity:
The heap will store at most k elements, so the space complexity is O(k).

int add(int val)
Time Complexity:
Inserting a new value into the heap takes O(log k) time.
If the size of the heap exceeds k, removing the smallest element (pop operation) also takes O(log k) time.
Therefore, the overall time complexity of the add method is O(log k).
Space Complexity:
The heap will store at most k elements, so the space complexity is O(k).



class KthLargest {
public:
    //kth largest means min heap
    priority_queue<int, vector<int>, greater<int>> pq;
    int size;
    KthLargest(int k, vector<int>& nums) {
        this->size = k;
        for(auto it : nums){
            pq.push(it);
            if(pq.size() > k){
                pq.pop();
            }
        }
    }
    
    int add(int val) {
        pq.push(val);
        while(pq.size() > size){
            pq.pop();
        }
        return pq.top();
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
